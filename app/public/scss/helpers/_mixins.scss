@import "_theme-variables";
@import "_foundation-settings";
@import "../../../bower_components/foundation/scss/foundation/components/_grid";

@mixin bp($point, $val: 0) {

	@if $point == small-up {
		@media #{$small-up} { @content; }
	}
	@if $point == small-only {
		@media #{$small-only} { @content; }
	}

	@if $point == medium-up {
		@media #{$medium-up} { @content; }
	}
	@if $point == medium-only {
		@media #{$medium-only} { @content; }
	}

	@if $point == large-up {
		@media #{$large-up} { @content; }
	}
	@if $point == large-only {
		@media #{$large-only} { @content; }
	}

	@if $point == xlarge-up {
		@media #{$xlarge-up} { @content; }
	}
	@if $point == xlarge-only {
		@media #{$xlarge-only} { @content; }
	}

	@if $point == xxlarge-up {
		@media #{$xxlarge-up} { @content; }
	}
	@if $point == xxlarge-only {
		@media #{$xxlarge-only} { @content; }
	}

	@if $point == retina {
		@media only screen and (min--moz-device-pixel-ratio: 1.3), (-o-min-device-pixel-ratio: 2.6/2), (-webkit-min-device-pixel-ratio: 1.3), (min-device-pixel-ratio: 1.3), (min-resolution: 1.3dppx) { @content; }
	}

	@if $point == print {
		@media only print { @content; }
	}

	@if $point == wildcard-up {
		@media (min-width: #{$val}) { @content; }
	}

}

@mixin layer($layer) {

	@if $layer == max {
		z-index: 200;
	}

	@if $layer == top {
		z-index: 100;
	}

	@if $layer == middle {
		z-index: 50;
	}

	@if $layer == bottom {
		z-index: 1;
	}

}

$default-fontsize: 16px;

@mixin em_width($px, $default: $default-fontsize) {
	width: #{$px / $default}em;
}
@mixin em_height($px, $default: $default-fontsize) {
	height: #{$px / $default}em;
}
@mixin em_maxwidth($px, $default: $default-fontsize) {
	max-width: #{$px / $default}em;
}
@mixin em_minwidth($px, $default: $default-fontsize) {
	min-width: #{$px / $default}em;
}
@mixin em_maxheight($px, $default: $default-fontsize) {
	max-height: #{$px / $default}em;
}
@mixin em_minheight($px, $default: $default-fontsize) {
	min-height: #{$px / $default}em;
}
@mixin em_padding($top: 0, $right: $top, $bot: $top, $left: $right, $default: $default-fontsize) {
	padding: #{$top / $default}em #{$right / $default}em #{$bot / $default}em #{$left / $default}em;
}
@mixin em_fontsize($px) {
	font-size: #{$px / $default-fontsize}em;
}
@mixin rem_fontsize($px) {
	font-size: #{$px / $default-fontsize}rem;
}
@mixin em_lineheight($px, $default: $default-fontsize) {
	line-height: #{$px / $default}em;
}

@mixin em_margin($top: 0, $right: $top, $bot: $top, $left: $right, $default: $default-fontsize) {
	@if $top == auto {
		$top : auto
	} @else {
		$top : #{$top / $default}em
	}

	@if $right == auto {
		$right: auto
	} @else {
		$right: #{$right / $default}em
	}

	@if $bot == auto {
		$bot: auto
	} @else {
		$bot: #{$bot / $default}em
	}

	@if $left == auto {
		$left: auto
	} @else {
		$left: #{$left / $default}em
	}

	margin: #{$top} #{$right} #{$bot} #{$left};
}

@mixin em_margin_top($top:0, $default: $default-fontsize) {
	@if $top == auto {
		$top : auto
	} @else {
		$top : #{$top / $default}em
	}

	margin-top: #{$top};
}

@mixin em_margin_right($right:0, $default: $default-fontsize) {
	@if $right == auto {
		$right : auto
	} @else {
		$right : #{$right / $default}em
	}

	margin-right: #{$right};
}
@mixin em_margin_bottom($bot:0, $default: $default-fontsize) {
	@if $bot == auto {
		$bot : auto
	} @else {
		$bot : #{$bot / $default}em
	}

	margin-bottom: #{$bot};
}
@mixin em_margin_left($left:0, $default: $default-fontsize) {
	@if $left == auto {
		$left : auto
	} @else {
		$left : #{$left / $default}em
	}

	margin-left: #{$left};
}

@mixin border-radius($radius) {
	-webkit-border-radius: $radius;
	-moz-border-radius: $radius;
	border-radius: $radius;
	background-clip: padding-box;  /* stops bg color from leaking outside the border */
}

@mixin vendorize($property, $value) {
	-webkit-#{$property}: $value;
	-moz-#{$property}: $value;
	-ms-#{$property}: $value;
	-o-#{$property}: $value;
	#{$property}: $value;
}

@mixin transition($prop: all, $time: 1s, $ease: ease) {
	-webkit-transition: $prop $time $ease;
	-moz-transition: $prop $time $ease;
	-o-transition: $prop $time $ease;
	-ms-transition: $prop $time $ease;
	transition: $prop $time $ease;
}

@mixin background-transparency($color, $alpha) {
	$rgba: rgba($color, $alpha);
	$ie-hex-str: ie-hex-str($rgba);
	background-color: transparent;
	background-color: $rgba;
	filter:progid:DXImageTransform.Microsoft.gradient(startColorstr=#{$ie-hex-str},endColorstr=#{$ie-hex-str});
	zoom: 1;
}

@mixin vertical-align {
	position: relative;
	top: 50%;
	-webkit-transform: translateY(-50%);
	-moz-transform: translateY(-50%);
	-ms-transform: translateY(-50%);
	-o-transform: translateY(-50%);
	transform: translateY(-50%);
}

@mixin gradient($start, $end) {
	background-image: -webkit-linear-gradient($start, $end);
	background-image:    -moz-linear-gradient($start, $end);
	background-image:      -o-linear-gradient($start, $end);
	background-image:         linear-gradient($start, $end);
}

// rewriting some ugly versions of Compass's mixins
@mixin transition-property($property) {
	transition-property: $property;
}
@mixin transition-duration($duration) {
	transition-duration: $duration;
}
@mixin align-items($align) {
	align-items: $align;
}
@mixin display-flex {
	display: flex;
}
@mixin box-shadow($shadow) {
	box-shadow: $shadow;
}
@mixin justify-content($justify) {
	justify-content: $justify;
}
@mixin flex($flex) {
	flex: $flex;
}
